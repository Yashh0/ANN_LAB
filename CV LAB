a = np.array([[17, 24, 1, 8, 15],
[23, 5, 7, 14, 16],
[ 4, 6, 13, 20, 22],
[10, 12, 19, 21, 3],
[11, 18, 25, 2, 9]])
print("a =")
print(a)
b = int(input("Enter the row < size of the Matrix: "))
c = int(input("Enter the column < size of matrix: "))
print("Element:", a[b, c])
N4 = [a[b+1, c] if b+1 < a.shape[0] else None,
a[b-1, c] if b-1 >= 0 else None,
a[b, c+1] if c+1 < a.shape[1] else None,
a[b, c-1] if c-1 >= 0 else None]
print("N4 =")
print(N4)
N8 = [a[b+1, c] if b+1 < a.shape[0] else None,
a[b-1, c] if b-1 >= 0 else None,
a[b, c+1] if c+1 < a.shape[1] else None,
a[b, c-1] if c-1 >= 0 else None, # Left
a[b+1, c+1] if b+1 < a.shape[0] and c+1 < a.shape[1] else None,
a[b+1, c-1] if b+1 < a.shape[0] and c-1 >= 0 else None,
a[b-1, c-1] if b-1 >= 0 and c-1 >= 0 else None,
a[b-1, c+1] if b-1 >= 0 and c+1 < a.shape[1] else None] #
print("N8 =")
print(N8)
ND = [a[b+1, c+1] if b+1 < a.shape[0] and c+1 < a.shape[1] else None,
a[b+1, c-1] if b+1 < a.shape[0] and c-1 >= 0 else None,
a[b-1, c-1] if b-1 >= 0 and c-1 >= 0 else None,
a[b-1, c+1] if b-1 >= 0 and c+1 < a.shape[1] else None]
print("ND =")
print(ND)



PROGRAM 2A
import cv2
import matplotlib.pyplot as plt
i = cv2.imread('apple.jpg')
i = cv2.cvtColor(i, cv2.COLOR_BGR2RGB)
plt.subplot(3, 2, 1)
plt.imshow(i)
plt.title('Original Image')
plt.axis('off')
r = i[:, :, 0]
plt.subplot(3, 2, 2)
plt.imshow(r, cmap='gray')
plt.title('Red Component')
plt.axis('off')
g = i[:, :, 1]
plt.subplot(3, 2, 3)
plt.imshow(g, cmap='gray')
plt.title('Green Component')
plt.axis('off')
b = i[:, :, 2]
plt.subplot(3, 2, 4)
plt.imshow(b, cmap='gray')
plt.title('Blue Component')
plt.axis('off')
rg = cv2.cvtColor(i, cv2.COLOR_RGB2GRAY)
plt.subplot(3, 2, 5)
plt.imshow(rg, cmap='gray')
plt.title('Gray Image')
plt.axis('off')
plt.tight_layout()
plt.show()



PROGRAM 2B
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Read the color image
I = cv2.imread('apple.jpg')
# Convert BGR to RGB (OpenCV reads images in BGR format)
I_rgb = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)
# Plot original color image
plt.subplot(2, 2, 1)
plt.imshow(I_rgb)
plt.title('Color Image')
plt.axis('off')
# Find complement of color image
c = cv2.bitwise_not(I_rgb)
plt.subplot(2, 2, 2)
plt.imshow(c)
plt.title('Complement of color Image')
plt.axis('off')
# Convert color image to grayscale
r = cv2.cvtColor(I_rgb, cv2.COLOR_RGB2GRAY)
plt.subplot(2, 2, 3)
plt.imshow(r, cmap='gray')
plt.title('Gray scale of color Image')
plt.axis('off')
# Find complement of grayscale image
b = cv2.bitwise_not(r)
plt.subplot(2, 2, 4)
plt.imshow(b, cmap='gray')
plt.title('Complement of Gray Image')
plt.axis('off')
# Simulation of an Image (Arithmetic & Logic Operation)
a = np.ones((40, 40), dtype=np.uint8)
b = np.zeros((40, 40), dtype=np.uint8)
c = np.hstack((a, b))
d = np.hstack((b, a))
e = np.vstack((c, d))
A = 10 * (c + d)
M = c * d
S = np.abs(c - d)
D = c / 4
plt.figure()
plt.subplot(3, 2, 1)
plt.imshow(c, cmap='gray')
plt.subplot(3, 2, 2)
plt.imshow(d, cmap='gray')
plt.subplot(3, 2, 3)
plt.imshow(A, cmap='gray')
plt.subplot(3, 2, 4)
plt.imshow(M, cmap='gray')
plt.subplot(3, 2, 5)
plt.imshow(S, cmap='gray')
plt.subplot(3, 2, 6)
plt.imshow(D, cmap='gray')
plt.show()


PROGRAM 3A
import cv2
import numpy as np
# Load the image
image = cv2.imread('apple.jpg')
# Define scaling factor
scaling_factor = 0.5 # You can change this value
# Perform scaling
scaled_image = cv2.resize(image, None, fx=scaling_factor, fy=scaling_factor,
interpolation=cv2.INTER_LINEAR)
# Define rotation angle (in degrees)
rotation_angle = 45 # You can change this value
# Perform rotation
height, width = scaled_image.shape[:2]
rotation_matrix = cv2.getRotationMatrix2D((width/2, height/2), rotation_angle, 1)
rotated_image = cv2.warpAffine(scaled_image, rotation_matrix, (width, height))
# Display the original, scaled, and rotated images
cv2.imshow('Original Image', image)
cv2.imshow('Scaled Image', scaled_image)
cv2.imshow('Rotated Image', rotated_image)
cv2.waitKey(0)
cv2.destroyAllWindows()


PROGRAM 3B
import cv2
import numpy as np
# Load the image
image = cv2.imread('apple.jpg')
# Define scaling factors
scaling_factors = [0.5, 2.0] # You can add more scaling factors as needed
# Define interpolation methods
interpolation_methods = [cv2.INTER_NEAREST, cv2.INTER_LINEAR, cv2.INTER_CUBIC]
# Display the original image
cv2.imshow('Original Image', image)
# Perform resizing with different methods
for factor in scaling_factors:
for method in interpolation_methods:
# Perform scaling
scaled_image = cv2.resize(image, None, fx=factor, fy=factor, interpolation=method)
# Display the resized image
method_name = ""
if method == cv2.INTER_NEAREST:
method_name = "Nearest Neighbor"
elif method == cv2.INTER_LINEAR:
method_name = "Bilinear"
elif method == cv2.INTER_CUBIC:
method_name = "Bicubic"
cv2.imshow(f'Resized (Factor: {factor}, Method: {method_name})', scaled_image)
# Wait for a key press and close all windows
cv2.waitKey(0)
cv2.destroyAllWindows()



PROGRAM 4
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Load the image
image = cv2.imread('input_image.jpg', cv2.IMREAD_GRAYSCALE)
# Apply contrast stretching
min_intensity = np.min(image)
max_intensity = np.max(image)
stretched_image = cv2.normalize(image, None, 0, 255, norm_type=cv2.NORM_MINMAX)
# Calculate and plot histograms
hist_original = cv2.calcHist([image], [0], None, [256], [0, 256])
hist_stretched = cv2.calcHist([stretched_image], [0], None, [256], [0, 256])
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(hist_original, color='b')
plt.title('Original Image Histogram')
plt.subplot(1, 2, 2)
plt.plot(hist_stretched, color='r')
plt.title('Stretched Image Histogram')
plt.tight_layout()
plt.show()
# Apply histogram equalization
equalized_image = cv2.equalizeHist(image)
# Calculate and plot histograms for equalized image
hist_equalized = cv2.calcHist([equalized_image], [0], None, [256], [0, 256])
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(stretched_image, cmap='gray')
plt.title('Contrast Stretched Image')
plt.subplot(1, 2, 2)
plt.imshow(equalized_image, cmap='gray')
plt.title('Histogram Equalized Image')
plt.tight_layout()
plt.show()



PROGRAM 5
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Load the image in grayscale
image = cv2.imread('input_image.jpg', cv2.IMREAD_GRAYSCALE)
# Get the dimensions of the image
height, width = image.shape
# Create an array to store the bit planes
bit_planes = np.zeros((8, height, width), dtype=np.uint8)
# Calculate the bit planes
for i in range(8):
bit_planes[i] = (image >> i) & 1 # Extract ith bit plane
# Display the bit planes
plt.figure(figsize=(12, 6))
for i in range(8):
plt.subplot(2, 4, i+1)
plt.imshow(bit_planes[i], cmap='gray')
plt.title(f'Bit Plane {i+1}')
plt.axis('off')
plt.tight_layout()
plt.show()
